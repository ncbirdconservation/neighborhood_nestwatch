# ---------------------------------------------------------------------------
# import-participants.py
# Created on: 2015-04-27 16:12:05.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# Imports data from Excel spreadsheet from neighborhood nestwatch project:
# Input: excel spreadsheet of addresses
# Returns:
#	nn_participants - feature class of participants, geolocated, with impervious surface, nearby participants, and instudyarea attributes
#	nn_participants_xls - excel version of above
#	nn_participants_kml - kml version of above
#	nn_participants_nearby - full list of participants, and their neighbors within 1.5 miles
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy import env
# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

# Set Geoprocessing environments
arcpy.env.scratchWorkspace = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb"
arcpy.env.workspace = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb"
arcpy.env.overwriteOutput = True

def pop_values_from_table(source_table, source_join_field, source_field, target_table, target_join_field, target_field):
	# links two features together, copies values from one table to another based on key field
	# loop through target table, read values from source & add from matching record (choose first record only)
	target_cursor = arcpy.UpdateCursor(target_table)

	for r in target_cursor:
		sql = source_join_field + ' = ' + str(r.getValue(target_join_field))
		source_cursor = arcpy.SearchCursor(source_table,sql)
		for sr in source_cursor:
			r.setValue(target_field,sr.getValue(source_field))
			target_cursor.updateRow(r)

def main():
	#######################################################
	# Process: Extract Values to Points - populate impervious surface values
	# Local variables:
	# nn_participants_xlsx = "C:\\data\\@projects\\neighborhood_nestwatch\\nn_participants.xlsx"
	# Script arguments

	temp_items = [] #array of items to clean up after script is complete
	delete_fields = ["Match_addr","Addr_type","Type","PlaceName","Place_addr","Phone","URL","Rank","AddBldg","AddNum","AddNumFrom","AddNumTo","Side","StPreDir","StPreType","StName","StType","StDir","StAddr","Nbrhd","City","Subregion","Region","Postal","PostalExt","Country","LangCode","Distance","DisplayX","DisplayY","Xmin","Xmax","Ymin","Ymax","ARC_Address","ARC_Neighborhood","ARC_City","ARC_Subregion","ARC_Region","ARC_Postal","ARC_PostalExt","ARC_CountryCode"] #fields to remove from nn_participants


	nn_participants_xlsx = arcpy.GetParameterAsText(0)
	if nn_participants_xlsx == '#' or not nn_participants_xlsx:
	    nn_participants_xlsx = "C:\\data\\@projects\\neighborhood_nestwatch\\nn_participants.xlsx" # provide a default value if unspecified


	nn_participants_temp = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nnparticipants_temp"
	temp_items.append(nn_participants_temp)
	nn_participants_table = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nn_participants_table"
	nn_participants_table_export = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nn_participants_table_export"
	temp_items.append(nn_participants_table_export)
	neighborhood_nestwatch_gdb = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb"

	# Process: Import current nn_participants excel file
	table_import=arcpy.ExcelToTable_conversion(nn_participants_xlsx, nn_participants_table, "Form Responses 1") # import participant table from downloaded google sheet
	# Process: Add State Field
	arcpy.AddField_management(nn_participants_table, "State", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "") #add state field
	arcpy.CalculateField_management(nn_participants_table, "State", "\"NC\"", "VB", "") #populate with "NC" - this will make geocoding easier
	# Process: Delete Questions Field
	arcpy.DeleteField_management(nn_participants_table, "Any_questions_;Full_Address") #populate with "NC" - this will make geocoding easier

	#######################################################
	# Geocode participant table
	# Note: In order for sign in to work, you must add a GIS Server pointing to the World geocode service and providing your credentials
	# Process: Geocode Addresses
	World_GeocodeServer = "GIS Servers\\world_geocode\\World.GeocodeServer"
	Input_Address_Fields = "Address Street_Address_1 VISIBLE NONE;Neighborhood <None> VISIBLE NONE;City City VISIBLE NONE;Subregion <None> VISIBLE NONE;Region State VISIBLE NONE;Postal Zip_Code VISIBLE NONE;PostalExt <None> VISIBLE NONE;CountryCode <None> VISIBLE NONE"
	nn_part_table = arcpy.GeocodeAddresses_geocoding(nn_participants_table, World_GeocodeServer, Input_Address_Fields, nn_participants_table_export, "STATIC")
	
	# Process: Feature Class to Feature Class - create a feature class out of the geolocated table - new FC called "nn_participants"
	nn_participants = arcpy.FeatureClassToFeatureClass_conversion(nn_part_table, neighborhood_nestwatch_gdb, "nn_participants", "", "Status \"Status\" true true false 1 Text 0 0 ,First,#,nn_participants_temp,Status,-1,-1;Score \"Score\" true true false 8 Double 0 0 ,First,#,nn_participants_temp,Score,-1,-1;Match_type \"Match_type\" true true false 2 Text 0 0 ,First,#,nn_participants_temp,Match_type,-1,-1;Match_addr \"Match_addr\" true true false 300 Text 0 0 ,First,#,nn_participants_temp,Match_addr,-1,-1;AddNum \"AddNum\" true true false 80 Text 0 0 ,First,#,nn_participants_temp,AddNum,-1,-1;StName \"StName\" true true false 120 Text 0 0 ,First,#,nn_participants_temp,StName,-1,-1;StType \"StType\" true true false 30 Text 0 0 ,First,#,nn_participants_temp,StType,-1,-1;StAddr \"StAddr\" true true false 300 Text 0 0 ,First,#,nn_participants_temp,StAddr,-1,-1;City \"City\" true true false 120 Text 0 0 ,First,#,nn_participants_temp,City,-1,-1;Region \"Region\" true true false 120 Text 0 0 ,First,#,nn_participants_temp,Region,-1,-1;Postal \"Postal\" true true false 20 Text 0 0 ,First,#,nn_participants_temp,Postal,-1,-1;Distance \"Distance\" true true false 8 Double 0 0 ,First,#,nn_participants_temp,Distance,-1,-1;X \"X\" true true false 8 Double 0 0 ,First,#,nn_participants_temp,X,-1,-1;Y \"Y\" true true false 8 Double 0 0 ,First,#,nn_participants_temp,Y,-1,-1;Timestamp \"Timestamp\" true true false 8 Date 0 0 ,First,#,nn_participants_temp,Timestamp,-1,-1;First_Name \"First Name\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,First_Name,-1,-1;Last_Name \"Last Name\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Last_Name,-1,-1;Street_Address_1 \"Street Address 1\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Street_Address_1,-1,-1;Street_Address_2 \"Street Address 2\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Street_Address_2,-1,-1;City_1 \"City\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,City_1,-1,-1;Zip_Code \"Zip Code\" true true false 4 Long 0 0 ,First,#,nn_participants_temp,Zip_Code,-1,-1;Any_questions_ \"Any questions?\" true true false 1103 Text 0 0 ,First,#,nn_participants_temp,Any_questions_,-1,-1;Phone_1 \"Phone\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Phone_1,-1,-1;Email \"Email\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Email,-1,-1;Latitude__Longitude__optional_ \"Latitude, Longitude (optional)\" true true false 255 Text 0 0 ,First,#,nn_participants_temp,Latitude__Longitude__optional_,-1,-1", "")

	#######################################################
	# Process: Extract Values to Points - populate impervious surface values, nearby indicator, instudyarea indicator

	# Process: Add Fields in FC to populate later
	arcpy.AddField_management(nn_participants, "PctImp100", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.AddField_management(nn_participants, "PctImp500", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.AddField_management(nn_participants, "nearby", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")
	arcpy.AddField_management(nn_participants, "instudyarea", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

	# create point files with impervious values for all nn locations
	nlcd_impervious_focal_100m = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nlcd_impervious_focal_100m"
	nn_impervious_100 = arcpy.gp.ExtractValuesToPoints_sa(nn_participants, nlcd_impervious_focal_100m, "nn_impervious_100", "NONE", "VALUE_ONLY")
	temp_items.append(nn_impervious_100)
	pop_values_from_table(nn_impervious_100, "OBJECTID", "RASTERVALU", nn_participants, "ObjectID", "PctImp100" )

	nlcd_impervious_focal_500m = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nlcd_impervious_focal_500m"
	nn_impervious_500 = arcpy.gp.ExtractValuesToPoints_sa(nn_participants, nlcd_impervious_focal_500m, "nn_impervious_500", "NONE", "VALUE_ONLY")
	temp_items.append(nn_impervious_500)
	pop_values_from_table(nn_impervious_500, "OBJECTID", "RASTERVALU", nn_participants, "ObjectID", "PctImp500" )

	# Process: Generate Near Table - determine which participants are within 1.5 miles of each other
	nn_participants_nearby = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nn_participants_nearby"
	nn_participants_nearby = arcpy.GenerateNearTable_analysis(nn_participants, nn_participants, "nn_participants_nearby", "1.5 Miles", "LOCATION", "ANGLE", "ALL", "20")
	pop_values_from_table(nn_participants_nearby, "IN_FID", "NEAR_FID", nn_participants, "ObjectID", "nearby" )

	# # Process: Intersect - mark records within the study area
	raleigh_study_area = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\raleigh_study_area"
	nn_participants_Intersect = "C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nn_participants_Intersect"
	nn_participants_Intersect = arcpy.Intersect_analysis("C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\nn_participants #;C:\\data\\@projects\\neighborhood_nestwatch\\neighborhood_nestwatch.gdb\\raleigh_study_area #", "nn_participants_Intersect", "ONLY_FID", "", "INPUT")
	pop_values_from_table(nn_participants_Intersect, "OBJECTID", "FID_raleigh_study_area", nn_participants, "ObjectID", "instudyarea" )

	#clean up nn_participants table
	arcpy.DeleteField_management(nn_participants,delete_fields)

	#######################################################
	# Export tables/feature classes
	nn_participants_nearby_xls = "C:\\data\\@projects\\neighborhood_nestwatch\\scratch\\nn_participants_nearby.xls"
	arcpy.TableToExcel_conversion(nn_participants_nearby, nn_participants_nearby_xls, "NAME", "CODE")

	nn_participants_xls = "C:\\data\\@projects\\neighborhood_nestwatch\\scratch\\nn_participants.xls"
	arcpy.TableToExcel_conversion(nn_participants, nn_participants_xls, "NAME", "CODE")

	# Process: Layer To KML
	nn_participants_kmz = "C:\\data\\@projects\\neighborhood_nestwatch\\scratch\\nn_participants.kmz"
	nn_participants_layer = arcpy.MakeFeatureLayer_management(nn_participants, "nn_participants_layer")
	temp_items.append(nn_participants_layer)
	arcpy.LayerToKML_conversion(nn_participants_layer, nn_participants_kmz, "0", "false", "DEFAULT", "1024", "96", "CLAMPED_TO_GROUND")

	#######################################################
	# Clean up unneeded tables/objects
	for i in temp_items:
		arcpy.Delete_management(i)

	#######################################################
	# Return true value (completed)
	arcpy.SetParameterAsText(1,"True")


if __name__ == "__main__":
	main()